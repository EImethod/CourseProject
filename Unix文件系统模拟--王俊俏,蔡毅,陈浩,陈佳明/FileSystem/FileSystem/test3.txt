import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


import java.io.* 
import java.util.* 
import java.text.*; 


//输入
Scanner cin = new Scanner(new BufferedInputStream(System.in)); 
Scanner cin = new Scanner(System.in); 
int n = cin.nextInt();         相当于   scanf("%d", &n);  
String s = cin.next();         相当于   scanf("%s", s);    
double t = cin.nextDouble();   相当于   scanf("%lf", &t); 
String s = cin.nextLine();     相当于   gets(s);
判断是否有下一个输入可以用 cin.hasNext() 

//格式.....这里0指一位数字，#指除0以外的数字。
import java.text.DecimalFormat;
DecimalFormat f = new DecimalFormat("#.00#"); 
DecimalFormat g = new DecimalFormat("0.000"); 
double a = 123.45678, b = 0.12;
System.out.println(f.format(a));
System.out.println(f.format(b));

//大数
BigInteger a = BigInteger.valueOf(100); 

// STL
Arrays.fill() 相当于memset
Arrays.sort() 相当于sort


//输出
static PrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out)); 
System.out.println(s);

//输入
1，普通 console IO
Scanner cin = new Scanner(System.in);
PrintWriter out=new PrintWriter(System.out,true);

PS: 有更快的 IO 方法，在大量输入时，可快10倍以上

BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));

如果需要 读到文件尾，可：

tree=cin.readLine();
   while(tree!=null) 
   {

}


2, 文件 IO
try 
{
	Scanner reader = new Scanner( new File("in.txt") );//读入
	PrintWriter out = new PrintWriter( "out.txt");//写入
	//***********************下面是处理部分
	int a;
	while( reader.hasNext())
	{
		a=reader.nextInt();
		System.out.println(a);
		out.println(a);
	}
	//*****************************
	out.close();//保存文件 
}
catch(IOException e)
{}

BufferedReader cin = new BufferedReader( new FileReader("test.in") );
PrintWriter out=new PrintWriter( "test.out" );
默认的文件地址在，工程下
////////////////////////////////////////////////////////////
对应这八种基本数据类型有八个封装类 ，封装类是继承自Object的Java类。
而基本数据类型所描述的含义与C等相同。 
基本类型byte,char,short,int,long,float,double,boolean，这些不是对象
原始类型Byte,Character.....这些是对象

基本类型                          原始类型(用于泛型)
boolean         true&false        Boolean
char               16             Character
byte               8              Byte
short              16             Short
int                  32           Integer
long               64             Long
float               32            Float
double           64               Double
                                  
string                            String
				  BigInteger    高精度整型
                                  BigDecimal  高精度浮点型 
////////////////////////////////////////////////////////////

map

import java.io.*;
import java.util.*;
import java.math.*;
import java.lang.*;

// Map类下有 HashMap TreeMap 等等...
class ACM
{
	public static HashMap<String,Integer> HM=
		new HashMap<String,Integer>();
	public static HashMap<Integer,BigInteger> KK;
	
	public static TreeMap<String,Integer> TM=
		new TreeMap<String,Integer>();
	
	//遍历Map
	public static void PrintMap(Map mp)
	{
		Iterator it=mp.entrySet().iterator();
		
		while(it.hasNext())
		{
			Map.Entry entry=
				(Map.Entry) it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		/*
		 * 
		Iterator it=TM.entrySet().iterator();
	
		while(it.hasNext())
		{
			Map.Entry<String, Integer> entry=
				(Map.Entry<String, Integer>)it.next();
			System.out.println(entry.getKey()+"  "+entry.getValue());
		}
		 */
	}
	public static void TestTreeMap()
	{
		System.out.println("Begin to Test TreeMap");
		TM.put("dd", 4);
		TM.put("aa", 99);
		TM.put("bb", 44);
		
		PrintMap(TM);
	}
	public static void TestHashMap()
	{
		System.out.println("Begin to Test HashMap");
		HM.put("dd", 4);
		HM.put("aa", 99);
		HM.put("bb", 44);
		
		PrintMap(HM);
	}
	
	public static void main(String[] args)
	{
		TestTreeMap();
		TestHashMap();

		//移除
		HM.remove("aa");
		if( HM.isEmpty() ) System.out.println("empty");
		if( HM.containsKey("dd") ) 
			System.out.println("the value of dd is "+HM.get("dd"));
		PrintMap(HM);
	}
}
//////////////////////////////////////////////////////////////////


排序:
class Point implements Comparable//必须加 implements Comparable
{
	public int x;
	public int compareTo(Object obj)
	{
		Point b=(Point)obj;
		if( this.x < b.x ) return -1;
		if( this.x > b.x ) return 1;
		return 0;
	}
}

Arrays.sort(p, 0 , n);  //快速排序 0~n-1


////////////////////////////////////////
大数BigInteger开根号,二分的
static public BigInteger sqrt(BigInteger n)
	{
		BigInteger L=BigInteger.valueOf(0) , R=n , M;
		if( L.multiply(L).compareTo(n)==0) return L;
		if( L.multiply(L).compareTo(n)==0) return R;
		while( L.add(BigInteger.valueOf(1)).compareTo(R)<0 )
		{
			M=L.add(R).divide(BigInteger.valueOf(2));
			if( M.multiply(M).compareTo(n)<=0 ) L=M;
			else R=M;
		}
		return L;
	}

//java字符串流
String s="124 4523 5423";
Scanner reader=new Scanner(s);
while( reader.hasNext()){
	int a=reader.nextInt();
	System.out.println(a);
}
//java计算时间差,不要导入util包
long startT=new Date().getTime();
int count=1000000000;
while( count!=0 ) count--;
long endT=new Date().getTime();



//java文件输出
FileOutputStream byteWriter=
	new FileOutputStream(new File("out.txt"));
byteWriter.write(97);
byteWriter.flush();
FileWriter charWriter=
	new FileWriter(new File("out2.txt"));
charWriter.write("I love you",3,4);
charWriter.flush();


//TreeMap用法 pku2418
import java.io.*;
import java.util.*;
class Main{
	public static void main(String[] args)throws IOException{
		//Scanner reader=
		//	new Scanner(new BufferedInputStream(System.in));
		BufferedReader reader=
			new BufferedReader(new InputStreamReader(System.in));
		TreeMap<String,Integer> mp=
			new TreeMap<String,Integer>();
		int Num=0;
		
		//System.out.println("ddd");
		
		while( true ){
			String s=reader.readLine(); if( s==null ) break; //
			if( mp.containsKey(s) ){
				Map.Entry<String,Integer> entry=mp.ceilingEntry(s);
				mp.put(entry.getKey(), entry.getValue()+1);
			}else{
				mp.put(s, 1);
			}
			Num++;
		}
		Iterator<Map.Entry<String, Integer> > it=mp.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<String, Integer> entry=it.next();
			System.out.printf("%s %.4f\n",entry.getKey(),100.0*entry.getValue()/Num );
		}
		reader.close();
	}
}


